% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/entrata_request.R
\name{entrata_req_retry}
\alias{entrata_req_retry}
\title{Entrata Request Retry Policy}
\usage{
entrata_req_retry(
  req,
  max_tries = 5,
  max_seconds = 30,
  retry_on_failure = TRUE,
  is_transient = entrata_resp_is_transient,
  backoff = .exponential_backoff,
  after = entrata_resp_retry_after
)
}
\arguments{
\item{req}{An \code{\link[httr2:request]{httr2::request()}} object.}

\item{max_tries, max_seconds}{Cap the maximum number of attempts with
\code{max_tries} or the total elapsed time from the first request with
\code{max_seconds}. If neither option is supplied (the default), \code{\link[httr2:req_perform]{req_perform()}}
will not retry.

\code{max_tries} is the total number of attempts make, so this should always
be greater than one.`}

\item{retry_on_failure}{Treat low-level failures as if they are
transient errors, and can be retried.}

\item{is_transient}{A predicate function that takes a single argument
(the response) and returns \code{TRUE} or \code{FALSE} specifying whether or not
the response represents a transient error.}

\item{backoff}{A function that takes a single argument (the number of failed
attempts so far) and returns the number of seconds to wait.}

\item{after}{A function that takes a single argument (the response) and
returns either a number of seconds to wait or \code{NULL}, which indicates
that a precise wait time is not available that the \code{backoff} strategy
should be used instead..}
}
\value{
Modified \code{\link[httr2:request]{httr2::request()}} with retry policy configured.
}
\description{
Set the retry policy for Entrata API requests.
}
\seealso{
\code{\link[httr2:req_retry]{httr2::req_retry()}}, \code{\link[=entrata_resp_is_transient]{entrata_resp_is_transient()}}, \code{\link[=entrata_resp_retry_after]{entrata_resp_retry_after()}}
}
