% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_shiny.R
\name{icon_text}
\alias{icon_text}
\alias{text_icon}
\title{#' Add a Tooltip to a Table Header
#'
#' @param value Table header title.
#' @param tooltip Tooltip content.
#' @param ... Not in use.
#'
#' @importFrom tippy tippy
with_tooltip <- function(value, tooltip, ...) {
tags$div(
style = "cursor: help",
tippy::tippy(value, tooltip, ...)
)
}
Combine Icons and Text}
\usage{
icon_text(icon, text, .function = shiny::icon)

text_icon(text, icon, .function = shiny::icon)
}
\arguments{
\item{icon}{The icon to display. This can be a character string or an icon
object.}

\item{text}{The text to display.}

\item{.function}{The function to use to create the icon if it is a character string.
Default is \code{\link[shiny:icon]{shiny::icon()}}, other possible options are \code{\link[bsicons:bs_icon]{bsicons::bs_icon()}}
or \code{\link[fontawesome:fa_i]{fontawesome::fa_i()}}.}
}
\value{
\code{\link[htmltools:tagList]{htmltools::tagList()}} containing the icon and text.
}
\description{
These functions simply wrap an icon and some text in an inline HTML span tag.
\itemize{
\item \code{icon_text()} places the icon before the text
\item \code{text_icon()} places the icon after the text
}

Note that the position of the arguments is different between the two functions
to match the position of the icon in the output.
}
\examples{
icon_text("user", "User")
icon_text(shiny::icon("user"), "User")

text_icon("User", "user")
text_icon("User", shiny::icon("user"))

}
